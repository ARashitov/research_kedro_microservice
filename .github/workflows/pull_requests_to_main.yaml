name: "Continuous integration testing & Deployment to test"

on:
  pull_request:
    branches: [ main ]

jobs:


  linting:

    runs-on: ubuntu-22.04

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.10.5
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.5

    - name: Building test environment
      run: bash -c "make env_install_dependencies"

    - name: Execution of pre-commit hooks over all files
      run: bash -c "pre-commit run --all-files"


  testing-application:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, macos-12, ubuntu-20.04, ubuntu-22.04]

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.10.5
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.5

    - name: Building test environment
      run: bash -c "make env_install_dependencies"

    - name: Autotesting
      env:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ENVIRONMENT: test
        google_maps_key:  ${{ secrets.GOOGLE_MAPS_KEY }}
      run: bash -c "make run_update_kedro_context && make run_test"


  testing-terraform:

    runs-on: ubuntu-22.04
    strategy:
      matrix:
        infrastructure-components: [
          "terraform/rest_services/load_balancer",
          "terraform/rest_services/autoscaling_group",
          "terraform/pipelines/aws_batch",
          "terraform/shared/ecr",
          "terraform/shared/elk/ec2",
          "terraform/shared/elk/eip",
          "terraform/shared/vpc",
        ]

    steps:

    - uses: actions/checkout@v2

    - name: "Setup AWS Credentials"
      run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8

    - name: ${{ matrix.infrastructure-components }} format check
      run: cd ${{ matrix.infrastructure-components }} && terraform fmt -check

    - name: ${{ matrix.infrastructure-components }} terraform init
      run: cd ${{ matrix.infrastructure-components }} && make init
      env:
        TF_WORKSPACE: test

    - name: ${{ matrix.infrastructure-components }} terraform plan
      env:
        TF_VAR_software_build_version: latest
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_WORKSPACE: test
        TF_VAR_google_maps_key:  ${{ secrets.GOOGLE_MAPS_KEY }}
      id: plan
      run: cd ${{ matrix.infrastructure-components }} && make plan

    - name: ${{ matrix.infrastructure-components }} terraform plan check
      if: steps.plan.outcome == 'failure'
      run: exit 1


  build:

    runs-on: ubuntu-22.04
    needs: [linting, testing-application, testing-terraform]
    steps:

      - uses: actions/checkout@v2

      - name: Image tag extraction from timestamp
        uses: josStorer/get-current-time@v2
        id: build-tag
        with:
          format: YYYY-MM-DD--HH-mm-ss
          utcOffset: "+00:00"

      - name: Image tag show
        env:
          build_tag: ${{ steps.build-tag.outputs.formattedTime }}
        run: echo $build_tag

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push to AWS ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.build-tag.outputs.formattedTime }}
        run: |
          docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --no-cache --force-rm .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    outputs:
      build_tag: ${{ steps.build-tag.outputs.formattedTime }}


  deployment:

    runs-on: ubuntu-22.04
    needs: [build]
    strategy:
      matrix:
        infrastructure-components: [
          "terraform/rest_services/autoscaling_group",
          "terraform/pipelines/aws_batch",
        ]

    steps:

      - uses: actions/checkout@v2

      - name: ${{ matrix.infrastructure-components }} terraform plan
        env:
          TF_VAR_software_build_version: latest
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_WORKSPACE: test
          TF_VAR_google_maps_key:  ${{ secrets.GOOGLE_MAPS_KEY }}
        id: init
        run: cd ${{ matrix.infrastructure-components }} && make init

      - name: ${{ matrix.infrastructure-components }} terraform plan
        env:
          TF_VAR_software_build_version: ${{ needs.build.outputs.build_tag }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_WORKSPACE: test
          TF_VAR_google_maps_key:  ${{ secrets.GOOGLE_MAPS_KEY }}
        id: plan
        run: cd ${{ matrix.infrastructure-components }} && make plan

      - name: ${{ matrix.infrastructure-components }} terraform plan check
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: ${{ matrix.infrastructure-components }} terraform apply
        env:
          TF_VAR_software_build_version: latest
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_WORKSPACE: test
          TF_VAR_google_maps_key:  ${{ secrets.GOOGLE_MAPS_KEY }}
        run: cd ${{ matrix.infrastructure-components }} && make apply
